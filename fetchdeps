#!/usr/bin/env bash
set -euo pipefail
IFS=$' '

FETCHDEPS_VERSION="development"
DEPS_FILE_FORMAT="deps_name: repository@version"

UPGRADEFILE_DEFAULT="fetchdeps.upgrade.txt"
INSTALLFILE_DEFAULT="fetchdeps.install.txt"
DEPSFOLDER_DEFAULT="deps"

DEPS_UPGRADE=${FETCHDEPS_UPGRADE_FILE:-${UPGRADEFILE_DEFAULT}}
DEPS_INSTALL=${FETCHDEPS_INSTALL_FILE:-${INSTALLFILE_DEFAULT}}
DEPS_FOLDER=${FETCHDEPS_DEPS_FOLDER:-${DEPSFOLDER_DEFAULT}}

DEPS_PERDEP_INSTALLED_FILE=fetchdeps.installed.txt

VERBOSE=${VERBOSE:-0}
FORCE=${FORCE:-0}


throw() {
	echo "ERROR: $@" 1>&2
	exit 1
}

throw_format() {
	throw "Line $1 '$dep' does not follow the format '$DEPS_FILE_FORMAT'"
}



confirm() {
	if [[ $FORCE = 1 ]] ; then
		return 0
	fi
	echo "${1:-}"
	read -r -p "Are you sure? [y/N] (Use option -f to avoid this question)" response < /dev/tty
	case $response in
	 [yY][eE][sS]|[yY])
	 return 0
	 ;;
	 *)
	 throw "Aborted"
	 ;;
	esac
}

confirm_wipe() {
	confirm "This action will wipe completely the following folder: $1"
}


install_run() {
	(
		mkdir -p ${DEPS_FOLDER}
		cd ${DEPS_FOLDER}
		echo "Installing on $(pwd)" 1>&2

		if [[ ! -f ../${DEPS_INSTALL} ]] ; then
			throw "'${0} install' needs a ${DEPS_INSTALL} file in the current folder"
		fi

		echo "Reading ${DEPS_INSTALL}" 1>&2
		DEPS=$(cat ../${DEPS_INSTALL})

		echo "$DEPS" | install_deps
	)
}

install_git() {
	local repository="$1"
	local commit_id=""
	(
		if [[ $VERBOSE = 0 ]] ; then
			exec 1>> ../git-stdout.log
			exec 2>> ../git-stderr.log
		fi
		git clone $repository .
		git reset --hard $version
		commit_id=$(git rev-parse HEAD)
		rm -rf .git
	)
	echo $commit_id
}

install_get_version() {
	local repository=$1
	local commit_id=$2
	echo "${1}@${2}"
}

install_single_dep() {
	local folder=$1
	local repository=$2
	local version=$3

	local installed_file=${folder}/${DEPS_PERDEP_INSTALLED_FILE}
	local installed_version=$(install_get_version $repository $version)

	if [[ -d ${folder} ]] && [[ -f ${installed_file} ]] && [[ $(cat ${installed_file}) = $installed_version ]]; then
		echo -e "Ignoring: ${folder}t(already installed)"
	else
	(
		echo -ne "Fetching: ${folder}"
		if [[ -d $folder ]]; then
			echo
			echo
			echo "For installing a new version of '${folder}', the old one needs to be deleted first"
			confirm_wipe "$(cd $folder; pwd)"
			echo
			rm -rf $folder > /dev/null 2>&1
		fi
		mkdir $folder
		cd $folder

		echo "$(install_get_version $repository $(install_git $repository))" > ${DEPS_PERDEP_INSTALLED_FILE}
		echo -e "tOK -> $(pwd)"
	)
	fi
}

install_deps() {
	local i=$((0))
	while read -r dep ; do

		if [[ $dep =~ '^([^[:space:]]+*): ([^[:space:]]+*)@([^[:space:]]+*)$' ]] ; then
			install_single_dep "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}" "${BASH_REMATCH[3]}"
		else
			throw_format $i
		fi

		i=$((i + 1))
	done
}





upgrade_run() {
	(
		if [[ ! -f ${DEPS_UPGRADE} ]] ; then
			throw "'${0} upgrade' needs a ${DEPS_UPGRADE} file in the current folder"
		fi

		if [[ -d ${DEPS_FOLDER} ]] ; then
			echo
			echo "For upgrading dependencies, the old ones under '${DEPS_FOLDER}' need to be deleted first"
			confirm_wipe "$(pwd)/${DEPS_FOLDER}"
			echo
			rm -r ${DEPS_FOLDER}
		fi
		mkdir -p ${DEPS_FOLDER}
		cd ${DEPS_FOLDER}
		echo "Installing on $(pwd)" 1>&2

		echo "Reading ${DEPS_UPGRADE}" 1>&2
		local DEPS=$(cat ../${DEPS_UPGRADE})

		echo "$DEPS" | install_deps
		ls -d deps/ | upgrade_deps
	)
}

upgrade_deps() {
	rm ../${DEPS_INSTALL} 2> /dev/null || true
	while read -r folder ; do
		folder=${folder///}
		local installed_version=$(cat ${folder}/${DEPS_PERDEP_INSTALLED_FILE})
		echo "${folder}: ${installed_version}" >> ../${DEPS_INSTALL}
	done
	echo "Generated: ${DEPS_INSTALL} (this file should be under version control)"
}



usage_show() {
	echo
	echo "Usage: [ENV] ${0} <command> [OPTION]"
	echo
	echo "where <command> is one of:"
	echo -e "tinstall t Fetches all the dependencies from '${DEPS_INSTALL}' in '${DEPS_FOLDER}' folder."
	echo -e "ttt Running this command should produce always the the same outcome in all environments"
	echo -e "ttt You will want to run this command after a fresh clone or after pulling changes from the repository"
	echo -e "ti tt Alias of <install>"
	echo -e "tupgrade t Same as <install> but using '${DEPS_UPGRADE}', also generates '${DEPS_INSTALL}' with all the fixed versions"
	echo -e "ttt Running this command will upgrade already fetched dependencies to a newer version if available"
	echo -e "ttt You should not do run this command in your build process, use <install> instead"
#	echo -e "tadd NAME URI t Adds 'NAME' dependency with 'URI' location to '${DEPS_UPGRADE}'"
#	echo -e "tremove NAME t Removes 'NAME' dependency from '${DEPS_UPGRADE}'"
#	echo -e "tlist tt Lists all the dependencies"
	echo -e "tversion t Shows the current version of this program"
	echo -e "thelp tt Shows the help"
	echo
	echo "where [ENV] are the following environment variables:"
	echo -e "tFETCHDEPS_INSTALL_FILE=file t Specifies the file readed during <install>"
	echo -e "ttttt (default: FETCHDEPS_INSTALL_FILE=${INSTALLFILE_DEFAULT})"
	echo -e "tFETCHDEPS_UPGRADE_FILE=file t Specifies the file readed during <upgrade>"
	echo -e "ttttt (default: FETCHDEPS_UPGRADE_FILE=${UPGRADEFILE_DEFAULT})"
	echo -e "tFETCHDEPS_DEPS_FOLDER=folder t Specifies the folder where all the dependencies will be downloaded"
	echo -e "ttttt (default: FETCHDEPS_DEPS_FOLDER=${DEPSFOLDER_DEFAULT})"
	echo
	echo "where [OPTION] is one of:"
	echo -e "t-f t Will stop asking for user confirmation when there is at action that removes folders under '${DEPS_FOLDER}'"
	echo -e "t-v t Verbose mode"
	echo -e "t-d t Debug mode"
	echo
}

help_show() {
	echo
	echo "FETCHDEPS VERSION: ${FETCHDEPS_VERSION}"
	echo
	echo -e "A cvs oriented dependency manager. Visit https://github.com/theypsilon/fetchdeps for more information."
	usage_show
	echo "EXAMPLES"
	echo -e "t- $0 install"
	echo
	echo "AUTHOR"
	echo -e "tJos√© Manuel Barroso Galindo <theypsilon@gmail.com>"
	echo
	echo "COPYRIGHT"
	echo -e "tLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>"
	echo
}


cli() {

	subcommand="${1:-}"

	shift || true

	while getopts fdv option; do
	 case $option in
	 f)
	 		FORCE=1
	 		;;
	 	d)
	 		set -x
	 		;;
	 	v)
				VERBOSE=1
				;;
	 ?)
	 usage_show
	 throw "Wrong option [$@]"
	 ;;
	esac
	done

	case $subcommand in
		i)
		 	;&
		install)
			install_run
			;;
		upgrade)
			upgrade_run
			;;
		version)
			echo "${FETCHDEPS_VERSION}"
			;;
		help)
			help_show
			;;
		*)
			usage_show
			if [[ "$subcommand" == "" ]]; then
				throw "Missing command"
			fi
			throw "Wrong command '$subcommand'"
			;;
	esac
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]] ; then
	cli "$@"
fi
